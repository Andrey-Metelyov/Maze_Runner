type: edu
custom_name: stage4
files:
- name: src/maze/Main.java
  visible: true
  text: |
    package maze;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/MazeRunnerTest.java
  visible: false
  text: |
    import maze.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;

    enum Elem {
        WALL, EMPTY, PATH, DUMMY;

        static Elem get(char c) {
            if (c == '\u2588') {
                return WALL;
            } else if (c == ' ') {
                return EMPTY;
            } else if (c == '/') {
                return PATH;
            } else {
                return null;
            }
        }
    }

    class Maze {

        // maze[height][width]
        // maze[row][col]
        Elem[][] maze;

        Maze(Maze other) {
            maze = new Elem[other.getHeight()][other.getWidth()];
            for (int h = 0; h < other.getHeight(); h++) {
                for (int w = 0; w < other.getWidth(); w++) {
                    maze[h][w] = other.maze[h][w];
                }
            }
        }

        Maze(List<String> lines) throws Exception {

            int lineCount = 1;
            for (String line : lines) {
                if (line.length() % 2 != 0) {
                    throw new Exception("Line " + lineCount + " of the maze " +
                        "contains odd number of characters. Should be always even.");
                }

                for (char c : line.toCharArray()) {
                    if (Elem.get(c) == null) {
                        String hex = Integer.toHexString((int)c);
                        throw new Exception(
                            "Found strange symbol in the " + lineCount +
                                " line of the maze: \\u" + hex);
                    }
                }

                int lineWidth = line.length() / 2;

                for (int currWidth = 0; currWidth < lineWidth; currWidth++) {
                    int currIndex = currWidth * 2;
                    int nextIndex = currIndex + 1;

                    char currChar = line.charAt(currIndex);
                    char nextChar = line.charAt(nextIndex);

                    if (currChar != nextChar) {
                        throw new Exception("There are symbols in " +
                            "this line that don't appear twice in a row " +
                            "(at indexes " + currIndex + " and " + nextIndex + ").\n" +
                            "Line: \"" + line + "\"");
                    }
                }

                lineCount++;
            }

            int mazeWidth = lines.get(0).length() / 2;
            int mazeHeight = lines.size();

            lineCount = 1;
            for (String line : lines) {
                if (line.length() / 2 != mazeWidth) {
                    throw new Exception("The first line of the maze contains " +
                        lines.get(0).length() + " characters, but the line #" +
                        lineCount + " contains " + line.length() + " characters.");
                }
                lineCount++;
            }

            maze = new Elem[mazeHeight][mazeWidth];

            for (int currHeight = 0; currHeight < mazeHeight; currHeight++) {
                String line = lines.get(currHeight);
                for (int currWidth = 0; currWidth < mazeWidth; currWidth++) {
                    char c = line.charAt(currWidth * 2);
                    maze[currHeight][currWidth] = Elem.get(c);
                }
            }

            if (maze[0][0] != Elem.WALL ||
                maze[0][mazeWidth - 1] != Elem.WALL ||
                maze[mazeHeight - 1][0] != Elem.WALL ||
                maze[mazeHeight - 1][mazeWidth - 1] != Elem.WALL) {
                throw new Exception("All four corners of the maze must be walls.");
            }

            for (int h = 0; h <= mazeHeight - 3; h++) {
                for (int w = 0; w <= mazeWidth - 3; w++) {
                    if (getElem(h, w) == Elem.WALL &&
                        getElem(h, w + 1) == Elem.WALL &&
                        getElem(h, w + 2) == Elem.WALL &&

                        getElem(h + 1, w) == Elem.WALL &&
                        getElem(h + 1, w + 1) == Elem.WALL &&
                        getElem(h + 1, w + 2) == Elem.WALL &&

                        getElem(h + 2, w) == Elem.WALL &&
                        getElem(h + 2, w + 1) == Elem.WALL &&
                        getElem(h + 2, w + 2) == Elem.WALL) {

                        throw new Exception("There are 3x3 block in the maze " +
                            "consisting only of walls. Such blocks are not allowed.");
                    }
                }
            }
        }

        Elem[] getRow(int rowNum) {
            Elem[] newRow = new Elem[getWidth()];
            for (int i = 0; i < getWidth(); i++) {
                newRow[i] = maze[rowNum][i];
            }
            return newRow;
        }

        Elem[] getCol(int colNum) {
            Elem[] newCol = new Elem[getHeight()];
            for (int i = 0; i < getHeight(); i++) {
                newCol[i] = maze[i][colNum];
            }
            return newCol;
        }

        Elem getElem(int height, int width) {
            return maze[height][width];
        }

        void setElem(int height, int width, Elem elem) {
            maze[height][width] = elem;
        }

        int getWidth() {
            return maze[0].length;
        }

        int getHeight() {
            return maze.length;
        }

        Maze copy() {
            return new Maze(this);
        }

        int count(Elem toCount) {
            int sum = 0;
            for (Elem[] row : maze) {
                for (Elem e : row) {
                    if (e == toCount) {
                        sum++;
                    }
                }
            }
            return sum;
        }

        int countAround(int h, int w, Elem elem) {
            int sum = 0;

            if (h + 1 < getHeight() &&
                getElem(h + 1, w) == elem) {
                sum++;
            }

            if (h - 1 >= 0 &&
                getElem(h - 1, w) == elem) {
                sum++;
            }

            if (w + 1 < getWidth() &&
                getElem(h, w + 1) == elem) {
                sum++;
            }

            if (w - 1 >= 0 &&
                getElem(h, w - 1) == elem) {
                sum++;
            }

            return sum;
        }

        int countEntrances() {
            int entranceCount = 0;
            for (Elem[] line : new Elem[][] {
                getCol(0),
                getCol(getWidth() - 1),
                getRow(0),
                getRow(getHeight() - 1)
            }) {

                for (Elem e : line) {
                    if (e != Elem.WALL) {
                        entranceCount++;
                    }
                }
            }
            return entranceCount;
        }

        private void propagate(Elem from, Elem to) {
            boolean didPropagate = true;
            while (didPropagate) {
                didPropagate = false;
                for (int h = 0; h < getHeight(); h++) {
                    for (int w = 0; w < getWidth(); w++) {
                        if (getElem(h, w) == from) {
                            if (countAround(h, w, to) > 0) {
                                didPropagate = true;
                                setElem(h, w, to);
                            }
                        }
                    }
                }
            }
        }

        int checkAccessibility() {
            int entranceHeight = 0;
            int entranceWidth = 0;

            findPoints: {
                for (int currWidth : new int[] {0, getWidth() - 1}) {
                    for (int currHeight = 0; currHeight < getHeight(); currHeight++) {
                        if (getElem(currHeight, currWidth) != Elem.WALL) {
                            entranceHeight = currHeight;
                            entranceWidth = currWidth;
                            break findPoints;
                        }
                    }
                }

                for (int currHeight : new int[] {0, getHeight() - 1}) {
                    for (int currWidth = 0; currWidth < getWidth(); currWidth++) {
                        if (getElem(currHeight, currWidth) != Elem.WALL) {
                            entranceHeight = currHeight;
                            entranceWidth = currWidth;
                            break findPoints;
                        }
                    }
                }
            }

            Maze copy = copy();
            copy.setElem(entranceHeight, entranceWidth, Elem.PATH);
            copy.propagate(Elem.EMPTY, Elem.PATH);

            return copy.count(Elem.EMPTY);
        }

        int checkPath() throws Exception {
            int entranceHeight = 0;
            int entranceWidth = 0;

            for (int currWidth : new int[] {0, getWidth() - 1}) {
                for (int currHeight = 0; currHeight < getHeight(); currHeight++) {
                    if (getElem(currHeight, currWidth) == Elem.EMPTY) {
                        throw new Exception("If the maze is solved all " +
                            "the entrances should be marked with '//' characters");
                    }
                    if (getElem(currHeight, currWidth) == Elem.PATH) {
                        entranceHeight = currHeight;
                        entranceWidth = currWidth;
                    }
                }
            }

            for (int currHeight : new int[] {0, getHeight() - 1}) {
                for (int currWidth = 0; currWidth < getWidth(); currWidth++) {
                    if (getElem(currHeight, currWidth) == Elem.EMPTY) {
                        throw new Exception("If the maze is solved all " +
                            "the entrances should be marked with '//' characters");
                    }
                    if (getElem(currHeight, currWidth) == Elem.PATH) {
                        entranceHeight = currHeight;
                        entranceWidth = currWidth;
                    }
                }
            }

            for (int h = 0; h < getHeight(); h++) {
                for (int w = 0; w < getWidth(); w++) {
                    if (getElem(h, w) == Elem.PATH) {
                        if (countAround(h, w, Elem.PATH) >= 3) {
                            throw new Exception("The escape path shouldn't branch off, " +
                                "it should go in one direction.");
                        }
                    }
                }
            }

            Maze copy = copy();
            copy.setElem(entranceHeight, entranceWidth, Elem.DUMMY);
            copy.propagate(Elem.PATH, Elem.DUMMY);

            return copy.count(Elem.PATH);
        }

        boolean equals(Maze other) {
            if (getWidth() != other.getWidth() || getHeight() != other.getHeight()) {
                return false;
            }
            for (int h = 0; h < getHeight(); h++) {
                for (int w = 0; w < getWidth(); w++) {
                    if (getElem(h, w) == Elem.WALL && other.getElem(h, w) != Elem.WALL ||
                        getElem(h, w) != Elem.WALL && other.getElem(h, w) == Elem.WALL) {
                        return false;
                    }
                }
            }
            return true;
        }

        static List<Maze> parse(String text) throws Exception {

            List<Maze> mazes = new ArrayList<>();

            List<String> lines = text
                .lines()
                .collect(Collectors.toList());

            lines.add("");

            List<String> mazeLines = new ArrayList<>();

            boolean isStarted = false;
            for (String line : lines) {
                if (line.contains("\u2588")) {
                    isStarted = true;
                    mazeLines.add(line);
                } else if (isStarted) {
                    isStarted = false;
                    Maze maze = new Maze(mazeLines);
                    mazes.add(maze);
                    mazeLines.clear();
                }
            }

            return mazes;
        }

    }

    class Clue {
        int size;
        boolean withPath;
        int count;
        Clue(int s, int c, boolean wp) {
            size = s;
            count = c;
            withPath = wp;
        }
    }

    public class MazeRunnerTest extends StageTest<Clue> {

        public MazeRunnerTest() {
            super(Main.class);
        }

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<Clue>()
                    .setInput("1\n17\n0")
                    .setAttach(new Clue(17, 1, false)),

                new TestCase<Clue>()
                    .setInput("1\n29\n3\ntest_maze.txt\n0")
                    .setAttach(new Clue(29, 1, false)),

                new TestCase<Clue>()
                    .setInput("2\ntest_maze.txt\n4\n0")
                    .setAttach(new Clue(29, 1, false)),

                new TestCase<Clue>()
                    .setInput("1\n35\n3\ntest_maze.txt\n0")
                    .setAttach(new Clue(35, 1, false)),

                new TestCase<Clue>()
                    .setInput("2\ntest_maze.txt\n4\n0")
                    .setAttach(new Clue(35, 1, false)),

                new TestCase<Clue>()
                    .setInput("2\ntest_maze.txt\n4\n5\n0")
                    .setAttach(new Clue(35, 2, true))
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            List<Maze> mazes;
            try {
                mazes = Maze.parse(reply);
            } catch (Exception e) {
                return CheckResult.wrong(
                    e.getMessage()
                );
            }

            if (mazes.size() == 0) {
                return CheckResult.wrong(
                    "No mazes found in the output. Check if you are using " +
                        "\\u2588 character to print the maze."
                );
            }

            if (mazes.size() != clue.count) {
                if (clue.count == 1) {
                    return CheckResult.wrong(
                        "Found " + mazes.size() + " mazes in the output. " +
                            "Should be only one maze."
                    );
                } else {
                    return CheckResult.wrong(
                        "Found " + mazes.size() + " mazes in the output. " +
                            "Should be two mazes."
                    );
                }
            }

            Maze fst = mazes.get(0);
            Maze snd = mazes.size() == 2 ? mazes.get(1) : null;

            if (snd != null && !fst.equals(snd)) {
                return CheckResult.wrong(
                    "The two mazes shown should be equal, but they are different."
                );
            }

            if (fst.count(Elem.PATH) != 0) {
                return CheckResult.wrong(
                    "The first maze should not contain '/' characters."
                );
            }

            int entrances = fst.countEntrances();
            if (entrances != 2) {
                return new CheckResult(false,
                    "There are " + entrances + " entrances to the maze, " +
                        "should be only two.");
            }

            int emptyLeft = fst.checkAccessibility();
            if (emptyLeft > 0) {
                return new CheckResult(false,
                    "There are " + emptyLeft + " empty " +
                        "cells that are inaccessible from the entrance of the maze " +
                        "(or there is no way from the entrance to the exit)."
                );
            }

            if (fst.getHeight() != clue.size) {
                return new CheckResult(false,
                    "Number of rows in the maze is incorrect. " +
                        "It's " + fst.getHeight() + ", but should be " + clue.size);
            }

            if (fst.getWidth() != clue.size) {
                return new CheckResult(false,
                    "Number of columns in the maze is incorrect. " +
                        "It's " + fst.getWidth() + ", but should be " + clue.size);
            }

            if (snd != null && clue.withPath) {
                try {
                    int pathLeft = snd.checkPath();
                    if (pathLeft > 0) {
                        return new CheckResult(false,
                            "There are " + pathLeft + " escape path ('//') " +
                                "cells that are separated from the escape path of the maze " +
                                "(or there is a break somewhere in the escape path)."
                        );
                    }
                } catch (Exception e) {
                    return CheckResult.wrong(
                        e.getMessage()
                    );
                }
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/maze/SerializationUtils.java
  visible: true
  text: |
    package maze;

    import java.io.*;

    class SerializationUtils {
        /**
         * Serialize the given object to the file
         */
        public static void serialize(Object obj, String fileName) throws IOException {
            FileOutputStream fos = new FileOutputStream(fileName);
            BufferedOutputStream bos = new BufferedOutputStream(fos);
            ObjectOutputStream oos = new ObjectOutputStream(bos);
            oos.writeObject(obj);
            oos.close();
        }

        /**
         * Deserialize to an object from the file
         */
        public static Object deserialize(String fileName) throws IOException, ClassNotFoundException {
            FileInputStream fis = new FileInputStream(fileName);
            BufferedInputStream bis = new BufferedInputStream(fis);
            ObjectInputStream ois = new ObjectInputStream(bis);
            Object obj = ois.readObject();
            ois.close();
            return obj;
        }
    }
  learner_created: true
- name: src/maze/PrimAlgorithm.java
  visible: true
  text: |
    package maze;

    import org.jetbrains.annotations.NotNull;

    import java.util.HashSet;
    import java.util.List;
    import java.util.PriorityQueue;
    import java.util.Set;

    public class PrimAlgorithm {
        private Graph graph;

        static class Edge implements Comparable<Edge> {
            int v;
            Graph.Edge edge;

            public Edge(int v, Graph.Edge edge) {
                this.v = v;
                this.edge = edge;
            }

            @Override
            public int compareTo(@NotNull Edge other) {
                if (this.edge.getWeight() > other.edge.getWeight()) {
                    return 1;
                } else if (this.edge.getWeight() < other.edge.getWeight()) {
                    return -1;
                }
                return edge.getVertex() - other.edge.getVertex();
            }

            @Override
            public String toString() {
                return v + ":(" + edge.getVertex() + ',' + edge.getWeight() + ')';
            }
        }

        PrimAlgorithm(Graph graph) {
            this.graph = graph;
        }

        Graph mst() {
            Graph result = new Graph(graph.vertices());
            Set<Integer> vertices = new HashSet<>();
            vertices.add(0);
            PriorityQueue<Edge> edges = new PriorityQueue<>();
            List<Graph.Edge> vertexEdges = graph.edges(0);
            for (Graph.Edge vertexEdge : vertexEdges) {
                edges.add(new Edge(0, vertexEdge));
            }

            while (!edges.isEmpty()) {
    //            System.out.println(edges);
                Edge edge = edges.poll();
                if (vertices.contains(edge.edge.getVertex())) {
    //                System.out.println("skip " + edge.v + ":(" + edge.edge.getVertex() + "," + edge.edge.getWeight() + ")");
                    continue;
                }
                int newVertex = edge.edge.getVertex();
                vertices.add(newVertex);
    //            System.out.println("add vertex " + newVertex);
                for (Graph.Edge newEdge : graph.edges(newVertex)) {
                    if (!vertices.contains(newEdge.getVertex())) {
                        edges.add(new Edge(newVertex, newEdge));
                    }
                }
                result.addEdge(edge.v, edge.edge.getVertex(), edge.edge.getWeight());
                result.addEdge(edge.edge.getVertex(), edge.v, edge.edge.getWeight());
            }
            return result;
        }

        public static void main(String[] args) {
            Graph g = new Graph(8);
            g.addEdge(0, 1, 1);
            g.addEdge(0, 2, 1);
            g.addEdge(0, 3, 2);
            g.addEdge(1, 0, 1);
            g.addEdge(1, 3, 2);
            g.addEdge(2, 0, 1);
            g.addEdge(2, 3, 4);
            g.addEdge(2, 4, 4);
            g.addEdge(3, 0, 2);
            g.addEdge(3, 1, 2);
            g.addEdge(3, 2, 4);
            g.addEdge(3, 4, 3);
            g.addEdge(3, 5, 2);
            g.addEdge(4, 2, 4);
            g.addEdge(4, 3, 3);
            g.addEdge(4, 5, 3);
            g.addEdge(4, 6, 5);
            g.addEdge(4, 7, 1);
            g.addEdge(5, 3, 2);
            g.addEdge(5, 4, 3);
            g.addEdge(5, 7, 3);
            g.addEdge(6, 4, 5);
            g.addEdge(6, 7, 2);
            g.addEdge(7, 4, 1);
            g.addEdge(7, 5, 3);
            g.addEdge(7, 6, 2);
            System.out.println(g);
            PrimAlgorithm alg = new PrimAlgorithm(g);
            System.out.println(alg.mst());
        }
    }
  learner_created: true
- name: src/maze/MazeModel.java
  visible: true
  text: |
    package maze;

    import java.io.Serializable;
    import java.util.Random;

    public class MazeModel implements Serializable {
        int width;
        int height;
        private int[][] data;

        MazeModel() {
            getPredefined();
        }

        MazeModel(int height, int width) {
            this.width = width;
            this.height = height;
            int graphHeight = (height - 1) / 2;
    //        if (height % 2 == 0 && (height / 2) % 2 == 1) {
    //            graphHeight = height / 2 - (height / 2) % 2;
    //        } else {
    //            graphHeight = height / 2;
    //        }
            int graphWidth = (width - 1) / 2;
    //        System.out.println("maze: " + height + "x" + width);
    //        System.out.println("graph: " + graphHeight + "x" + graphWidth);
            Graph graph = new Graph(  graphHeight * graphWidth);
            initGraph(graph, graphHeight, graphWidth);
            PrimAlgorithm pa = new PrimAlgorithm(graph);
            Graph mazeGraph = pa.mst();
            initMaze(mazeGraph, graphHeight, graphWidth);
    //        Random random = new Random();
    //        generateWalls(random);
    //        generateInner(random);
        }

        private void initMaze(Graph mazeGraph, int height, int width) {
            System.out.println("maze graph: " + height + "x" + width);
    //        System.out.println("maze graph:\n" + mazeGraph);
    //        showGraph(mazeGraph);
    //        System.out.println("height: " + height);
    //        System.out.println("width: " + width);
            data = new int[2 * height + 1][2 * width + 1];
            for (int i = 0; i < 2 * width + 1; i++) {
                data[0][i] = 1;
                data[2 * height][i] = 1;
            }
            if ((2 * height + 2) < this.height) {
                // add one more wall
                for (int i = 0; i < 2 * width + 1; i++) {
                    data[2 * height + 1][i] = 1;
                }
            }
            for (int i = 0; i < height - 1; i++) {
                for (int j = 0; j < width - 1; j++) {
    //                List<Graph.Edge> edges = mazeGraph.edges(width * i + j);
                    int row = 2 * i + 1;
                    int column = 2 * j + 1;
                    int current = width * i + j;

                    data[row][column] = 0;
                    data[row + 1][column + 1] = 1;

                    // to the right?
                    if (mazeGraph.isAdjacent(current, current + 1)) {
                        data[row][column + 1] = 0;
                    } else {
                        data[row][column + 1] = 1;
                    }
                    // to down
                    if (mazeGraph.isAdjacent(current, current + width)) {
                        data[row + 1][column] = 0;
                    } else {
                        data[row + 1][column] = 1;
                    }
                }
    //            for (int[] datum : data) {
    //                System.out.println(Arrays.toString(datum));
    //            }
    //            System.out.println();
            }
            // last line
            for (int i = 0; i < width - 1; i++) {
                int row = 2 * height - 1;
                int column = 2 * i + 1;
                int current = width * (height - 1) + i;

                data[row][column] = 0;
                if (mazeGraph.isAdjacent(current, current + 1)) {
                    data[row][column + 1] = 0;
                } else {
                    data[row][column + 1] = 1;
                }
            }
    //        for (int[] datum : data) {
    //            System.out.println(Arrays.toString(datum));
    //        }
    //        System.out.println();
            // last column
            for (int i = 0; i < height - 1; i++) {
                int row = 2 * i + 1;
                int column = 2 * width - 1;
                int current = width * (i + 1) - 1;

                data[row][column] = 0;
                if (mazeGraph.isAdjacent(current, current + width)) {
                    data[row + 1][column] = 0;
                } else {
                    data[row + 1][column] = 1;
                }
            }
    //        for (int[] datum : data) {
    //            System.out.println(Arrays.toString(datum));
    //        }
    //        System.out.println();
            addWallsWithExit(data);
        }

        private void addWallsWithExit(int[][] data) {
            boolean hasEntrance = false;
            boolean hasExit = false;
            for (int i = 1; i < data.length - 1; i++) {
                if (!hasEntrance && data[i][1] == 0) {
                    hasEntrance = true;
                    data[i][0] = 0;
                } else {
                    data[i][0] = 1;
                }
            }
            for (int i = data.length - 2; i > 0; i--) {
                if (!hasExit && data[i][data[i].length - 2] == 0) {
                    hasExit = true;
                    data[i][data[i].length - 1] = 0;
                } else {
                    data[i][data[i].length - 1] = 1;
                }
            }
        }

    //    private void showGraph(Graph mazeGraph) {
    //        for (int i = 0; i < height; i++) {
    //            for (int j = 0; j < width; j++) {
    //                int current = width * i + j;
    //                boolean hasRight = mazeGraph.isAdjacent(current, current + 1);
    //                boolean hasDown = mazeGraph.isAdjacent(current, current + width + 1);
    //                if (hasRight && hasDown) {
    //                    System.out.print("\u2192\u2193");
    //                } else if (hasRight) {
    //                    System.out.print("\u2192 ");
    //                } else if (hasDown) {
    //                    System.out.print("\u2193 ");
    //                } else {
    //                    System.out.print("[]");
    //                }
    //            }
    //            System.out.println();
    //        }
    //    }

        private void initGraph(Graph graph, int height, int width) {
            Random random = new Random();
            for (int i = 0; i < height - 1; i++) {
                for (int j = 0; j < width - 1; j++) {
                    int currentVertex = i * width + j;
                    // to the left
                    double weight = random.nextDouble();
                    graph.addEdge(currentVertex, currentVertex + 1, weight);
                    graph.addEdge(currentVertex + 1, currentVertex, weight);
    //                System.out.println("add edge: " + currentVertex + "<->" + (currentVertex + 1));
                    // to the down
                    weight = random.nextDouble();
                    graph.addEdge(currentVertex, currentVertex + width, weight);
                    graph.addEdge(currentVertex + width, currentVertex, weight);
    //                System.out.println("add edge: " + currentVertex + "<->" + (currentVertex + width));
                }
            }
    //        System.out.println("last column:");
            for (int i = 0; i < height - 1; i++) {
                int currentVertex = width * (i + 1) - 1;
                // to the down
                double weight = random.nextDouble();
                graph.addEdge(currentVertex, currentVertex + width, weight);
                graph.addEdge(currentVertex + width, currentVertex, weight);
    //            System.out.println("add edge: " + currentVertex + "<->" + (currentVertex + width));
            }
    //        System.out.println("last line:");
            for (int i = 0; i < width; i++) {
                int currentVertex = width * (height - 1) + i;
                // to the left
                double weight = random.nextDouble();
                graph.addEdge(currentVertex, currentVertex + 1, weight);
                graph.addEdge(currentVertex + 1, currentVertex, weight);
    //            System.out.println("add edge: " + currentVertex + "<->" + (currentVertex + 1));
            }
        }

        private void getPredefined() {
            data = new int[][] {
                    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                    {0, 0, 1, 0, 1, 0, 1, 0, 0, 1},
                    {1, 0, 1, 0, 0, 0, 1, 0, 1, 1},
                    {1, 0, 0, 0, 1, 1, 1, 0, 0, 0},
                    {1, 0, 1, 0, 0, 0, 0, 0, 1, 1},
                    {1, 0, 1, 0, 1, 1, 1, 0, 1, 1},
                    {1, 0, 1, 0, 1, 0, 0, 0, 1, 1},
                    {1, 0, 1, 0, 1, 1, 1, 0, 1, 1},
                    {1, 0, 1, 0, 0, 0, 1, 0, 0, 1},
                    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1}};
        }

        private void generateWalls(Random random) {
            for (int i = 0; i < data.length; i++) {
                data[0][i] = 1;
                data[data.length - 1][i] = 1;
            }
            generateWallWithEntrance(random, 0);
            generateWallWithEntrance(random, data.length - 1);
        }

        private void generateWallWithEntrance(Random random, int column) {
            boolean entrancePresent = false;
            for (int i = 1; i < data.length - 1; i++) {
                if (entrancePresent) {
                    data[i][column] = 1;
                } else {
                    data[i][column] = random.nextInt(2);
                    if (data[i][column] == 0) {
                        entrancePresent = true;
                    }
                }
            }
        }

        private void generateInner(Random random) {
            for (int i = 1; i < data.length - 1; i++) {
                for (int j = 1; j < data[i].length - 1; j++) {
                    data[i][j] = random.nextInt(2);
                }
            }
        }

        public int[][] getData() {
            return data;
        }

        public static void main(String[] args) {
            int height = 17;
            int width = 17;
            MazeModel model = new MazeModel(height, width);
    //        Graph mazeGraph = new Graph(height * (width + 1));
            /*
            *   0=[{4}],
                1=[{5}],
                2=[{6}],
                3=[{7}],
                4=[{0}, {8}, {5}],
                5=[{4}, {9}, {1}],
                6=[{10}, {2}],
                7=[{11}, {3}],
                8=[{4}],
                9=[{5}, {10}],
                10=[{9}, {11}, {6}],
                11=[{10}, {7}]}
            * */
    //        mazeGraph.addEdge(0, 4,1);        mazeGraph.addEdge(4, 0,1);
    //        mazeGraph.addEdge(1, 5,1);        mazeGraph.addEdge(5, 1,1);
    //        mazeGraph.addEdge(2, 6,1);        mazeGraph.addEdge(6, 2,1);
    //        mazeGraph.addEdge(2, 3,1);        mazeGraph.addEdge(3, 2,1);
    //        mazeGraph.addEdge(4, 5,1);        mazeGraph.addEdge(5, 4,1);
    //        mazeGraph.addEdge(4, 8,1);        mazeGraph.addEdge(8, 4,1);
    //        mazeGraph.addEdge(5, 9,1);        mazeGraph.addEdge(9, 5,1);
    //        mazeGraph.addEdge(6, 10,1);       mazeGraph.addEdge(10, 6,1);
    //        mazeGraph.addEdge(7, 11,1);       mazeGraph.addEdge(11, 7,1);
    //        mazeGraph.addEdge(9, 10,1);       mazeGraph.addEdge(10, 9,1);
    //        mazeGraph.addEdge(10, 11,1);      mazeGraph.addEdge(11, 10,1);
    //        model.initMaze(mazeGraph, 3, 4);*/
            MazeView view = new MazeView();
            view.update(model.getData());
        }
    }
  learner_created: true
- name: src/maze/MazeController.java
  visible: true
  text: |
    package maze;

    import java.util.Scanner;

    public class MazeController {
        private MazeModel mazeModel;
        private MazeView mazeView;

        public enum Menu {
            EXIT,
            GENERATE,
            LOAD,
            SAVE,
            DISPLAY
        }

        public MazeController() {
            mazeView = new MazeView();
            mazeModel = null;
        }

        public MazeController(MazeModel mazeModel, MazeView mazeView) {
            this.mazeModel = mazeModel;
            this.mazeView = mazeView;
        }

        public void loadMaze() {
            Scanner scanner = new Scanner(System.in);
            String filename = scanner.nextLine();
            try {
                mazeModel = (MazeModel) SerializationUtils.deserialize(filename);
            } catch (Exception e) {
                System.out.println("The file " +  filename + " does not exist");
            }
        }

        public void saveMaze() {
            Scanner scanner = new Scanner(System.in);
            String filename = scanner.nextLine();
            try {
                SerializationUtils.serialize(mazeModel, filename);
            } catch (Exception e) {
                System.out.println("Error saving maze to file " + filename);
            }
        }

        public void generateMaze() {
            System.out.println("Enter the size of a new maze");
            Scanner scanner = new Scanner(System.in);
            int size = scanner.nextInt();
            mazeModel = new MazeModel(size, size);
        }

        public void updateView() {
            mazeView.update(mazeModel.getData());
        }

        public void run() {
            Menu res;
            while ((res = showMenu()) != Menu.EXIT) {
                switch (res) {
                    case EXIT:
                        System.out.println("Bye!");
                        return;
                    case GENERATE:
                        generateMaze();
                    case DISPLAY:
                        updateView();
                        break;
                    case SAVE:
                        saveMaze();
                        break;
                    case LOAD:
                        loadMaze();
                        break;
                    default:
                        System.out.println("Error");
                }
            }
        }

        private Menu showMenu() {
            Scanner scanner = new Scanner(System.in);
            System.out.println("\n=== Menu ===");
            if (mazeModel == null) {
                while (true) {
                    System.out.println("1. Generate a new maze\n" +
                            "2. Load a maze\n" +
                            "0. Exit");
                    String res = scanner.nextLine();
                    switch (res) {
                        case "0":
                            return Menu.EXIT;
                        case "1":
                            return Menu.GENERATE;
                        case "2":
                            return Menu.LOAD;
                        default:
                            System.out.println("Incorrect option. Please try again");
                    }
                }
            } else {
                while (true) {
                    System.out.println("1. Generate a new maze\n" +
                            "2. Load a maze\n" +
                            "3. Save the maze\n" +
                            "4. Display the maze\n" +
                            "0. Exit");
                    String res = scanner.nextLine();
                    switch (res) {
                        case "0":
                            return Menu.EXIT;
                        case "1":
                            return Menu.GENERATE;
                        case "2":
                            return Menu.LOAD;
                        case "3":
                            return Menu.SAVE;
                        case "4":
                            return Menu.DISPLAY;
                        default:
                            System.out.println("Incorrect option. Please try again");
                    }
                }
            }
        }
    }
  learner_created: true
- name: src/maze/MazeView.java
  visible: true
  text: |
    package maze;

    public class MazeView {
        public void update(int[][] data) {
            System.out.println("maze:" + data.length + "x" + data[0].length);
            for (int i = 0; i < data.length; i++) {
                for (int j = 0; j < data[i].length; j++) {
                    if (data[i][j] == 0) {
                        System.out.print("  ");
                    } else {
                        System.out.print("\u2588\u2588");
                    }
                }
                System.out.println();
            }
        }
    }
  learner_created: true
- name: src/maze/Graph.java
  visible: true
  text: |
    package maze;

    import java.util.ArrayList;
    import java.util.HashMap;
    import java.util.List;
    import java.util.Map;

    public class Graph {
        private final int vertices;
        private int edges;
        private final Map<Integer, List<Edge>> adjacency;

        static class Edge {
            private final int vertex;
            private final double weight;

            public Edge(int vertex, double weight) {
                this.vertex = vertex;
                this.weight = weight;
            }

            public int getVertex() {
                return vertex;
            }

            public double getWeight() {
                return weight;
            }

            @Override
            public String toString() {
    //            return "{" + vertex + ", " + weight + "}";
                return "{" + vertex + "}";
            }
        }

        public Graph(int vertices) {
            this.vertices = vertices;
            adjacency = new HashMap<>(vertices);
        }

        public int vertices() {
            return vertices;
        }

        public List<Edge> edges(int vertex) {
            return adjacency.getOrDefault(vertex, new ArrayList<>());
        }

        public boolean isAdjacent(int v, int w) {
            List<Edge> adj = edges(v);
            for (Edge edge : adj) {
                if (edge.vertex == w) {
                    return true;
                }
            }
            return false;
        }

        public void addEdge(int v, int w, double weight) {
            if (adjacency.containsKey(v)) {
                List<Edge> adj = adjacency.get(v);
                adj.add(new Edge(w, weight));
            } else {
                List<Edge> adj = new ArrayList<>();
                adj.add(new Edge(w, weight));
                adjacency.put(v, adj);
            }
            edges++;
        }

        @Override
        public String toString() {
            return "Graph{" +
                    "vertices=" + vertices +
                    ", edges=" + edges +
                    ", adjacency=" + adjacency +
                    '}';
        }

        public static void main(String[] args) {
            Graph g = new Graph(5);
            g.addEdge(2, 3, 2);
            g.addEdge(2, 4, 3);
            g.addEdge(2, 5, 1);
            g.addEdge(2, 6, 7);
            g.addEdge(1, 2, 6);
            System.out.println(g);
        }
    }
  learner_created: true
- name: test_maze.txt
  visible: true
  text: "��\0\x05sr\0\x0emaze.MazeModel\x1dY?����]\x02\0\x03I\0\x06heightI\0\x05width[\0\
    \x04datat\0\x03[[Ixp\0\0\0\x0f\0\0\0\x0fur\0\x03[[I\x17��O\x19��<\x02\0\0xp\0\0\
    \0\x0fur\0\x02[IM�`&v겥\x02\0\0xp\0\0\0\x0f\0\0\0\x01\0\0\0\x01\0\0\0\x01\0\0\0\
    \x01\0\0\0\x01\0\0\0\x01\0\0\0\x01\0\0\0\x01\0\0\0\x01\0\0\0\x01\0\0\0\x01\0\0\
    \0\x01\0\0\0\x01\0\0\0\x01\0\0\0\x01uq\0~\0\x05\0\0\0\x0f\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\x01uq\0~\0\x05\0\0\0\x0f\0\0\0\x01\0\0\0\0\0\0\0\x01\0\0\0\
    \x01\0\0\0\x01\0\0\0\x01\0\0\0\x01\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0\x01\0\0\0\
    \x01\0\0\0\x01\0\0\0\0\0\0\0\x01uq\0~\0\x05\0\0\0\x0f\0\0\0\x01\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\x01\0\0\0\0\0\0\0\x01uq\0~\0\x05\0\0\0\x0f\0\0\0\x01\0\0\0\0\0\0\0\x01\0\0\0\
    \0\0\0\0\x01\0\0\0\x01\0\0\0\x01\0\0\0\x01\0\0\0\x01\0\0\0\0\0\0\0\x01\0\0\0\x01\
    \0\0\0\x01\0\0\0\x01\0\0\0\x01uq\0~\0\x05\0\0\0\x0f\0\0\0\x01\0\0\0\0\0\0\0\x01\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \x01\0\0\0\0\0\0\0\x01uq\0~\0\x05\0\0\0\x0f\0\0\0\x01\0\0\0\x01\0\0\0\x01\0\0\0\
    \0\0\0\0\x01\0\0\0\x01\0\0\0\x01\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x01\0\0\0\0\0\
    \0\0\x01\0\0\0\0\0\0\0\x01uq\0~\0\x05\0\0\0\x0f\0\0\0\x01\0\0\0\0\0\0\0\x01\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\x01uq\0~\0\x05\0\0\0\x0f\0\0\0\x01\0\0\0\0\0\0\0\x01\0\0\0\0\
    \0\0\0\x01\0\0\0\x01\0\0\0\x01\0\0\0\x01\0\0\0\x01\0\0\0\x01\0\0\0\x01\0\0\0\x01\
    \0\0\0\x01\0\0\0\0\0\0\0\x01uq\0~\0\x05\0\0\0\x0f\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\
    \x01\0\0\0\0\0\0\0\x01uq\0~\0\x05\0\0\0\x0f\0\0\0\x01\0\0\0\x01\0\0\0\x01\0\0\0\
    \x01\0\0\0\x01\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0\x01\0\0\0\0\
    \0\0\0\x01\0\0\0\0\0\0\0\x01uq\0~\0\x05\0\0\0\x0f\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\x01uq\0~\0\x05\0\0\0\x0f\0\0\0\x01\0\0\0\x01\0\0\0\x01\0\0\0\0\0\
    \0\0\x01\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0\x01\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\
    \x01\0\0\0\0\0\0\0\x01uq\0~\0\x05\0\0\0\x0f\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\x01\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x01\
    \0\0\0\0\0\0\0\0uq\0~\0\x05\0\0\0\x0f\0\0\0\x01\0\0\0\x01\0\0\0\x01\0\0\0\x01\0\
    \0\0\x01\0\0\0\x01\0\0\0\x01\0\0\0\x01\0\0\0\x01\0\0\0\x01\0\0\0\x01\0\0\0\x01\
    \0\0\0\x01\0\0\0\x01\0\0\0\x01"
  learner_created: false
- name: src/maze/DijkstraAlgorithm.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/47/stages/254/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/47/stages/254/implement">JetBrains
    Academy</a>
  time: Sun, 13 Sep 2020 09:16:45 UTC
record: -1
